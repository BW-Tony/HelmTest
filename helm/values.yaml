global:
  environment: Production
  domain: bitwarden.example.org
  ## updateStrategy:
  ##  type: RollingUpdate
  ##  rollingUpdate:
  ##    maxSurge: 25%
  ##    maxUnavailable: 25%
  updateStrategy:
    type: RollingUpdate
  # nameOverride:
  # fullnameOverride:
  # installationId and installationKey should be generated online at https://bitwarden.com/host/
  installationId: XXX-YYY-ZZZ
  installationKey: REPLACE
  env:
    baseUris:
      globalSettings__pushRelayBaseUri: https://push.bitwarden.com
      globalSettings__installation__identityUri: https://identity.bitwarden.com
    yubico:
      globalSettings__yubico__clientId: XXX-YYY-ZZZ
      globalSettings__yubico__key: SECRET
    oidc:
      globalSettings__oidcIdentityClientKey: SECRET
    mail:
      globalSettings__mail__replyToEmail: noreply@example.org
      globalSettings__mail__smtp__host: smtp.example.org
      globalSettings__mail__smtp__port: "587"
      globalSettings__mail__smtp__ssl: "false"
      globalSettings__mail__smtp__username: user
      globalSettings__mail__smtp__password: SECRET
      globalSettings__mail__smtp__trustServer: "true"
    userRegistration:
      globalSettings__disableUserRegistration: "false"
    hibp:
      globalSettings__hibpApiKey: SECRET
    admin:
      adminSettings__admins: admin@example.com

persistence:
  #storageClass:
  finalizers:
    - kubernetes.io/pvc-protection
  pvc:
    logs:
      accessModes:
        - ReadWriteMany
      size: 100Mi
    core:
      accessModes:
        - ReadWriteMany
      size: 100Mi
    identity:
      accessModes:
        - ReadWriteMany
      size: 100Mi
    db:
      accessModes:
        - ReadWriteOnce
      size: 100Mi
    certificates:
      accessModes:
        - ReadWriteOnce
      size: 100Mi

ingress:
  # To test this Helm chart in for example minikube ingress controller could be disabled and LoadBalancer Service tyoes will be used instead
  enabled: false
  annotations: {}
    #ingress.kubernetes.io/protocol: https
    #ingressclass.kubernetes.io/is-default-class: "true"
    #traefik.frontend.rule.type: PathPrefix
    #ingressClass: traefik
  tls:
    # if enabled an tls secret will be generated for ingress instead of using a already existing one
    enabled: false
    secretName: bitwarden.example.org

db:
  # If buildIn a dockerized database will be used instead of an external service like rds, any other DBaaS or self hosted DB
  buildIn: true
  image: bitwarden/mssql:latest
  replicas: 1
  restartPolicy: Always
  imagePullPolicy: IfNotPresent
  username: sa
  host: bitwarden-db-service
  port: 1433
  password: SECRET

web:
  image: bitwarden/web:latest
  replicas: 1
  restartPolicy: Always
  imagePullPolicy: IfNotPresent
  podAnnotations: {}
  affinity: {}
  tolerations: {}
  nodeSelector: {}
  # schedulerName:
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  ressources:
    limits:
      cpu: 250m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 1Gi

services:
  attachments:
    image: bitwarden/attachments:latest
    replicas: 1
    restartPolicy: Always
    imagePullPolicy: IfNotPresent
    podAnnotations: {}
    affinity: {}
    tolerations: {}
    nodeSelector: {}
    # schedulerName:
    securityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
    ressources:
      limits:
        cpu: 250m
        memory: 1Gi
      requestes:
        cpu: 250m
        memory: 1Gi

  events:
    image: bitwarden/events:latest
    replicas: 1
    restartPolicy: Always
    imagePullPolicy: IfNotPresent
    podAnnotations: {}
    affinity: {}
    tolerations: {}
    nodeSelector: {}
    # schedulerName:
    securityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
    ressources:
      limits:
        cpu: 250m
        memory: 1Gi
      requestes:
        cpu: 250m
        memory: 1Gi

  icons:
    image: bitwarden/icons:latest
    replicas: 1
    restartPolicy: Always
    imagePullPolicy: IfNotPresent
    podAnnotations: {}
    affinity: {}
    tolerations: {}
    nodeSelector: {}
    # schedulerName:
    securityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
    ressources:
      limits:
        cpu: 250m
        memory: 1Gi
      requestes:
        cpu: 250m
        memory: 1Gi

  identity:
    image: bitwarden/identity:latest
    replicas: 1
    restartPolicy: Always
    imagePullPolicy: IfNotPresent
    podAnnotations: {}
    affinity: {}
    tolerations: {}
    nodeSelector: {}
    # schedulerName:
    securityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
    ressources:
      limits:
        cpu: 250m
        memory: 1Gi
      requestes:
        cpu: 250m
        memory: 1Gi

  api:
    image: bitwarden/api:latest
    replicas: 1
    restartPolicy: Always
    imagePullPolicy: IfNotPresent
    podAnnotations: {}
    affinity: {}
    tolerations: {}
    nodeSelector: {}
    # schedulerName:
    securityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
    ressources:
      limits:
        cpu: 250m
        memory: 1Gi
      requestes:
        cpu: 250m
        memory: 1Gi

  admin:
    image: bitwarden/admin:latest
    replicas: 1
    restartPolicy: Always
    imagePullPolicy: IfNotPresent
    podAnnotations: {}
    affinity: {}
    tolerations: {}
    nodeSelector: {}
    # schedulerName:
    securityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
    ressources:
      limits:
        cpu: 250m
        memory: 1Gi
      requestes:
        cpu: 250m
        memory: 1Gi

  notifications:
    image: bitwarden/notifications:latest
    replicas: 1
    restartPolicy: Always
    imagePullPolicy: IfNotPresent
    podAnnotations: {}
    affinity: {}
    tolerations: {}
    nodeSelector: {}
    # schedulerName:
    securityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
    ressources:
      limits:
        cpu: 250m
        memory: 1Gi
      requestes:
        cpu: 250m
        memory: 1Gi

  sso:
    enabled: false
    image: bitwarden/sso:latest
    replicas: 1
    restartPolicy: Always
    imagePullPolicy: IfNotPresent
    podAnnotations: {}
    affinity: {}
    tolerations: {}
    nodeSelector: {}
    # schedulerName:
    securityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
    ressources:
      limits:
        cpu: 250m
        memory: 1Gi
      requestes:
        cpu: 250m
        memory: 1Gi

  portal:
    image: bitwarden/portal:latest
    replicas: 1
    restartPolicy: Always
    imagePullPolicy: IfNotPresent
    podAnnotations: {}
    affinity: {}
    tolerations: {}
    nodeSelector: {}
    # schedulerName:
    securityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
    ressources:
      limits:
        cpu: 250m
        memory: 1Gi
      requestes:
        cpu: 250m
        memory: 1Gi

checks:
  livenessProbeHeaders: {}
  readinessProbeHeaders: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 120
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1


# ToDo: Integrate Helm functions to genrate Secrets Randomly
secrets:
  internalIdentityKey: RANDOM
  certificate_password: RANDOM
  duoAKey: RANDOM

metrics:
  enabled: false
  podAnnotations: {}
